package basepatterns.creational.singleton;

/**
 * <h3>Одиночка</h3>
 * <br>
 * <b>Одиночка</b> — это порождающий паттерн проектирования,
 * который гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа.
 * <br>
 * <br><b>Преимущества</b>
 * <br>&emsp;- Гарантирует наличие единственного экземпляра класса, что полезно для ресурсов,
 * которые не должны дублироваться, например, файлы конфигурации или доступ к базе данных.
 * <br>&emsp;- Предоставляет к нему глобальную точку доступа. Позволяет получить доступ
 * к единственному экземпляру из любой части приложения, что удобно для общих данных и настроек.
 * <br>&emsp;- Реализует отложенную инициализацию объекта-одиночки.
 * <br>
 * <br><b>Недостатки:</b>
 * <br>&emsp;- Нарушает принцип единственной ответственности класса. Класс Singleton выполняет не
 * только свою основную функцию, но и управляет своим существованием, что противоречит принципу
 * единственной ответственности.
 * <br>&emsp;- Маскирует плохой дизайн.
 * <br>&emsp;- Проблемы мультипоточности. В многопоточных приложениях требуется синхронизация
 * для безопасного доступа к единственному экземпляру.
 * <br>&emsp;- Может усложнять модульное тестирование из-за глобальной доступности и скрытых зависимостей.
 */
public class ClassicSingleton {

    private static volatile ClassicSingleton instance;

    private ClassicSingleton() {}

    public static ClassicSingleton getInstance() {
        ClassicSingleton localInstance = instance;
        if (localInstance == null) {
            synchronized (ClassicSingleton.class) {
                localInstance = instance;
                if (localInstance == null) {
                    instance = localInstance = new ClassicSingleton();
                }
            }
        }
        return localInstance;
    }
}
